---
libvirt_host_packages:
- qemu-kvm
- libvirt-bin
- virtinst
- net-tools
- python-libvirt # allow ansible management
- cloud-image-utils # used to convert images
- uuid-runtime # generate machine uuids
- python-configparser # required for ini_file

network_up_hooks:
- 'echo 1 > /proc/sys/net/ipv4/conf/eth0/proxy_arp'

#### IMAGE DOWNLOAD

libvirt_image_url: "https://cloud-images.ubuntu.com/trusty/current/trusty-server-cloudimg-amd64-disk1.img"

# name of the image downloaded
libvirt_image_dist: "{{ libvirt_image_url | basename }}.dist"

# name of the converted image
libvirt_image_name: "{{ libvirt_image_url | basename }}"

# path where the images are stored
libvirt_images_path: "/tmp"
libvirt_images_ubuntu_cloud_tmp_folder: '/tmp'

ansible_facts_path: '/etc/ansible/facts.d' # path where local Ansible facts are stored & read

#### NETWORKING SET UP

libvirt_bridge_path: '/etc/libvirt/ansible/networks'

libvirt_bridges:
- name: default
  forward: nat
  bridge: virbr0
  domain: vm
  ip_address: 192.168.122.1
  ip_netmask: 255.255.255.0
  dhcp_start: 192.168.122.2
  dhcp_end:   192.168.122.253
  ipv6_prefix: 64



### MACHINE SET UP 

libvirt_domain:
  # basic arguments
  groups: [] # names of Ansible nodes/groups used to provision the domain
  name: # name/uuid of the domain (empty means new uuid)
  title: '' # title of the vm
  description: '' # description of the vm
  apt_mirror: ''
  # note: if you do not provide a domain_id each run will create a new vm!

  # host access ports
  #  0 => new port from counter from libvirt_xxx_base_port
  # -1 => no port is forwarded
  # >0 => use this host port
  host_ports:
    ssh: 0 # port forwarded from the host to the VM ssh

  # default VM configuration
  vm:
    memory: "512MiB" # RAM memory available to the VM
    vcpu: 1 # number of cores designated to the VM
    vcpu_placement: 'static' # options 'auto', 'static', defaults to 'numatune'
    vcpu_cpuset: [] # list of host CPU numbers the VM can run on
    networks: ['default'] # libvirts id of networks this VM is part of
    disk_size: "12G" # use this to change first disk size
    features: ['acpi', 'apic', 'pae'] # vm features available

  # features
  serial_console: yes # make a console on serial port 0 available
  vnc: no
  autostart: yes # should the domain VM start after reboot of the host

  # Valid install_types:
  install_type: 'base-image' # way to install the VM (this only affects the first run!)

  #
  # 1. 'base-image'
  # ----------
  # a simple image
  base_image:
    path: # path to the cloud image for the domain
    mode: 'snapshot' # options: snapshot, copy

  extra_disks: []
  # - id: 'data-disk' # logical name of the disk (required)
  #   mount_path: '/data' # vm path for mounting (default)
  #   mount_opts: 'defaults,noatime,nodev' # options for mounting (default)
  #   size: '8G' # size of the disk (required)
  #   type: 'image' # type of the disk (default)
  #   # type options
  #   # 1. 'image' - file image
  #   image_type: 'qcow2' # image types supported by the host (default)
  #   # 2. 'lvm' - logical disk
  #   lvm_group: '' # name of volume group (required)

  # cloud initialisation method
  init_mode: 'cloud-config' # options: cloud-config, configdrive (empty will skip any initialisation)

  #
  # Cloud-Config
  # ============
  #
  # Used by Ubuntu Cloud images
  #
  # see https://bazaar.launchpad.net/~cloud-init-dev/cloud-init/trunk/view/head:/doc/examples/cloud-config-user-groups.txt
  cloud_config:
    users:
    - name: 'ubuntu'
      gecos: 'Ubuntu'
      ssh-authorized-keys: ['']
      shell: '/bin/bash'
      sudo: 'ALL=(ALL) NOPASSWD:ALL'
      groups: 'adm,audio,cdrom,dialout,floppy,video,plugdev,dip,netdev' # comma separated string!
    bootcmd: []
    timezone: '' # like Europe/Berlin

  # libvirt os settings - see: https://libvirt.org/formatdomain.html#elementsOS
  os: "{{ libvirt_os_virtualized_x86_64 }}"
  #   type: 'hvm' # options 'hvm'*, 'linux', 'exe'
  #   type_arch: 'x86_64' # cpu architecture required by the os
  #   type_machine: 'pc' # system architecture required by the os
  #   boot: ['hd'] # devices for boot

  # libvirt cpu settings - see: https://libvirt.org/formatdomain.html#elementsCPU
  cpu: "{{ libvirt_vm_cpu_fast }}"
  # more options:
  #   model: # name of the cpu model eg. "core2duo"
  #   model_fallback: 'allow' # fallback options 'allow', 'forbid'
  #   vendor: # name of the vendor eg. "Intel"
  #   topology: # simulated CPU topology
  #     sockets: 1
  #     cores: 1
  #     threads: 1
  #   features: [] # array of hashes
  #   - name: 'vmx'
  #     policy: 'require' # options 'force', 'require', 'optional', 'disable', 'forbid'
  #   - 'smx' # feature with default policy 'require'

# basic arguments
libvirt_domain_groups: "{{ libvirt_domain.groups | default([], true) }}" # names of Ansible nodes/groups used to provision the domain
libvirt_domain_name: "{{ libvirt_domain.name | default('', true) }}" # name/uuid of the domain (empty means new uuid)
libvirt_domain_title: "{{ libvirt_domain.title | default('', true) }}" # title of the vm
libvirt_domain_description: "{{ libvirt_domain.description | default('', true) }}" # description of the vm
# note: if you do not provide a domain_id each run will create a new vm!

# host access ports
#  0 => new port from counter from libvirt_xxx_base_port
# -1 => no port is forwarded
# >0 => use this host port
libvirt_ssh_port: "{{ (libvirt_domain.host_ports | default({}, true)).ssh | default(0, true) }}" # port forwarded from the host to the VM ssh

# default VM configuration
libvirt_vm_memory: "{{ (libvirt_domain.vm | default({}, true)).memory | default('512MiB', true) }}" # RAM memory available to the VM
libvirt_vm_vcpu: "{{ (libvirt_domain.vm | default({}, true)).vcpu | default('1', true) }}" # number of cores designated to the VM
libvirt_vm_vcpu_placement: "{{ (libvirt_domain.vm | default({}, true)).vcpu_placement | default('static', true) }}" # options 'auto', 'static', defaults to 'numatune'
libvirt_vm_vcpu_cpuset: "{{ (libvirt_domain.vm | default({}, true)).vcpu_cpuset | default([], true) }}" # list of host CPU numbers the VM can run on
libvirt_vm_networks: "{{ (libvirt_domain.vm | default({}, true)).networks | default(['default'], true) }}" # libvirts id of networks this VM is part of
libvirt_vm_disk_size: "{{ (libvirt_domain.vm | default({}, true)).disk_size | default('12G', true) }}" # use this to change first disk size
libvirt_vm_features: "{{ (libvirt_domain.vm | default({}, true)).features | default(['acpi', 'apic', 'pae'], true) }}" # vm features available

# features
libvirt_vm_serial_console: "{{ libvirt_domain.serial_console | default(true, true) }}" # make a console on serial port 0 available
libvirt_vm_vnc: "{{ libvirt_domain.vnc | default(false, true) }}"

libvirt_autostart: "{{ libvirt_domain.autostart | default(true, true) }}" # should the domain VM start after reboot of the host

# Valid install_types:
libvirt_install_type: "{{ libvirt_domain.install_type | default('base-image', true) }}" # way to install the VM (this only affects the first run!)
#
# 1. 'base-image'
# ----------
# a simple image
libvirt_base_image: "{{ (libvirt_domain.base_image | default({}, true)).path | default('', true) }}" # path to the cloud image for the domain
libvirt_base_image_mode: "{{ (libvirt_domain.base_image | default({}, true)).mode | default('snapshot', true) }}" # options: snapshot, copy

libvirt_extra_disks: "{{ libvirt_domain.extra_disks | default([], true) }}"
# - id: 'data-disk' # logical name of the disk (required)
#   mount_path: '/data' # vm path for mounting (default)
#   mount_opts: 'defaults,noatime,nodev' # options for mounting (default)
#   size: '8G' # size of the disk (required)
#   type: 'image' # type of the disk (default)
#   # type options
#   # 1. 'image' - file image
#   image_type: 'qcow2' # image types supported by the host (default)
#   # 2. 'lvm' - logical disk
#   lvm_group: '' # name of volume group (required)

# cloud initialisation method
libvirt_init_mode: "{{ libvirt_domain.init_mode | default('cloud-config', true) }}" # options: cloud-config, configdrive (empty will skip any initialisation)

libvirt_apt_mirror: "{{ libvirt_domain.apt_mirror | default('', true) }}"

#
# Cloud-Config
# ============
#
# Used by Ubuntu Cloud images
#
# see https://bazaar.launchpad.net/~cloud-init-dev/cloud-init/trunk/view/head:/doc/examples/cloud-config-user-groups.txt
libvirt_cloud_config_users: "{{ (libvirt_domain.cloud_config | default({}, true)).users | default([libvirt_cloud_config_default_user], true) }}"

libvirt_cloud_config_default_user:
  name: 'ubuntu'
  gecos: 'Ubuntu'
  ssh-authorized-keys: ['']
  shell: '/bin/bash'
  sudo: 'ALL=(ALL) NOPASSWD:ALL'
  groups: 'adm,audio,cdrom,dialout,floppy,video,plugdev,dip,netdev' # comma separated string!

libvirt_cloud_config_bootcmd: "{{ (libvirt_domain.cloud_config | default({}, true)).bootcmd | default([], true) }}"

# example bootcmd that enables dhcp for ipv6 on ubuntu 16.04 guests
libvirt_cloud_config_ipv6_dhcp_bootcmd: [ cloud-init-per, once, ipv6-dhcp, "/bin/sh", "-c", "echo iface ens2 inet6 dhcp >> /etc/network/interfaces.d/51-cloud-init-ipv6.cfg" ]

libvirt_cloud_config_timezone: "{{ (libvirt_domain.cloud_config | default({}, true)).timezone | default('', true) }}"

# libvirt os settings - see: https://libvirt.org/formatdomain.html#elementsOS
libvirt_os_virtualized_x86_64:
  type: 'hvm'
  type_arch: 'x86_64'

libvirt_os_virtualized_x86:
  type: 'hvm'
  type_arch: 'i686'

libvirt_os: "{{ libvirt_domain.os | default(libvirt_os_virtualized_x86_64, true) }}"
#   type: 'hvm' # options 'hvm'*, 'linux', 'exe'
#   type_arch: 'x86_64' # cpu architecture required by the os
#   type_machine: 'pc' # system architecture required by the os
#   boot: ['hd'] # devices for boot

# libvirt cpu settings - see: https://libvirt.org/formatdomain.html#elementsCPU
#
# use these settings for easily migratable vms (default)
libvirt_vm_cpu_migratable:
  match: 'exact' # options 'minimum', 'exact', 'strict'
  mode: 'custom' # options 'custom', 'host-model', 'host-passthrough'
#
# use these settings for fast, supports nested virtualisation
libvirt_vm_cpu_fast:
  mode: 'host-model' # everything libvirt understands

libvirt_vm_cpu: "{{ libvirt_domain.cpu | default(libvirt_vm_cpu_fast, true) }}"
# more options:
#   model: # name of the cpu model eg. "core2duo"
#   model_fallback: 'allow' # fallback options 'allow', 'forbid'
#   vendor: # name of the vendor eg. "Intel"
#   topology: # simulated CPU topology
#     sockets: 1
#     cores: 1
#     threads: 1
#   features: [] # array of hashes
#   - name: 'vmx'
#     policy: 'require' # options 'force', 'require', 'optional', 'disable', 'forbid'
#   - 'smx' # feature with default policy 'require'

# configuration options
libvirt_images_path: "/tmp" # path on the host, where all the images are stored

# template for the stored facts hash (values are variable/fact names)
libvirt_domain_fact_template: >-
  {
    "ssh_ip": "{{ libvirt_result_ip_address }}",
    "ssh_port": "{{ libvirt_result_ssh_port }}",
    "rdp_port": {{ libvirt_result_rdp_port }},
    "winrm_port": {{ libvirt_result_winrm_port }},
    "groups": {{ libvirt_domain_groups }}
  }

ansible_facts_path: '/etc/ansible/facts.d' # path where local Ansible facts are stored & read
