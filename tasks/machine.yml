- stat:
    path: "{{ libvirt_base_image }}"
  register: libvirt_base_image_stat_result

- fail:
    msg: "base image '{{ libvirt_base_image }}' does not exist"
  when: not libvirt_base_image_stat_result.stat.exists

- include: domain_id.yml

- include: extra_disk.yml
  disk: "{{ item }}"
  with_items: "{{ libvirt_extra_disks }}"

- include: base_image.yml
  when: libvirt_install_type == 'base-image'

- include: cloud_config.yml
  when: libvirt_init_mode == 'cloud-config'

- include: list.yml
  when: libvirt_all_domains is not defined

- block:
  - name: create_domain | template
    template:
      dest: "/tmp/{{ libvirt_result_domain_name }}.xml"
      src: "machine.xml.j2"

  - name: create_domain | define
    command: "virsh define /tmp/{{ libvirt_result_domain_name }}.xml"

  - name: create_domain | start
    command: "virsh start {{ libvirt_result_domain_name }}"
  when: libvirt_result_domain_name not in libvirt_all_domains

- name: autostart | list domains
  command: virsh list --autostart --name
  changed_when: no
  register: libvirt_list_autostart_result

- name: autostart | enable
  command: "virsh autostart {{ libvirt_result_domain_name }}"
  when: libvirt_autostart and (libvirt_result_domain_name not in libvirt_list_autostart_result.stdout_lines)

- name: autostart | disable
  command: "virsh autostart {{ libvirt_result_domain_name }} --disable"
  when: not libvirt_autostart and (libvirt_result_domain_name in libvirt_list_autostart_result.stdout_lines)

- include: mac_and_ip.yml

- name: wait for ssh
  wait_for:
    host: "{{ libvirt_result_ip_address }}"
    port: 22
    timeout: 60 # seconds

- debug:
    msg: "Machine created at {{libvirt_result_ip_address}}"